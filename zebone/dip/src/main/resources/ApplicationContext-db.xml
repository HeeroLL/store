<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:p="http://www.springframework.org/schema/p" xmlns:tx="http://www.springframework.org/schema/tx"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
       http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd
       http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.0.xsd">

	<description>数据库相关配置</description>
	<bean id="propertyConfigurer" class="com.zebone.util.PropertyConfigurer">
		<property name="locations">
			<list>
				<value>classpath:redis.properties</value>
				<value>classpath:auditlog-jdbc.properties</value>
				<value>classpath:notice.properties</value>
				<value>classpath:jdbc.properties</value>
			</list>
		</property>
	</bean>
	
	<!--定义数据源 -->
     <!--  
	<bean id="dataSource" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${jdbc.driver}" />
		<property name="url" value="${jdbc.url}" />
		<property name="username" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
		<property name="initialSize" value="${jdbc.initialSize}" />
		<property name="maxActive" value="${jdbc.maxActive}" />
		<property name="maxIdle" value="${jdbc.maxIdle}" />
		<property name="minIdle" value="${jdbc.minIdle}" />
	</bean>
	-->
	<bean id="dipDataSource" class="com.alibaba.druid.pool.DruidDataSource"
		destroy-method="close" init-method="init">
		<property name="driverClassName" value="${dip.jdbc.driver}" />
		<property name="url" value="${dip.jdbc.url}" />
		<property name="username" value="${dip.jdbc.username}" />
		<property name="password" value="${dip.jdbc.password}" />
		<property name="initialSize" value="${dip.jdbc.initialSize}" />
		<property name="maxActive" value="${dip.jdbc.maxActive}" />
		<property name="validationQuery" value="${validationQuery}" />
		<property name="testOnBorrow" value="false" />
		<property name="testOnReturn" value="false" />
		<property name="testWhileIdle" value="true" />
		<property name="timeBetweenEvictionRunsMillis" value="60000" />
		<property name="minEvictableIdleTimeMillis" value="25200000" />
		<property name="filters" value="mergeStat" />
	</bean>

	<!-- jndi -->
	<!--  
	<bean id="dataSource" class="org.springframework.jndi.JndiObjectFactoryBean">
		<property name="jndiName" value="jdbc/dip_lr" />
		<property name="lookupOnStartup" value="false" />
		<property name="cache" value="true" />
		<property name="proxyInterface" value="javax.sql.DataSource" />
	</bean>
	-->
	
	<tx:annotation-driven transaction-manager="transactionManager"/>	
	<!-- 定义事物管理 -->
	<bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dipDataSource" />
	</bean>


	<!-- 配置mybatis的 SqlSessionFactoryBean-->
	<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dipDataSource" />
		<!-- 设置mybatis的环境配置文件 -->
		<property name="configLocation" value="classpath:mybatisConfig.xml" />
	</bean>

	<!-- 指定mybatis映射器的位置，spring自动扫描并将映射器生成代理放到spring上下文中 -->
	<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.zebone"/>
		<property name="annotationClass" value="com.zebone.btp.core.mybatis.Mapper"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
	</bean>
	
	<!-- JDBC add by ouyangxin 20121219-->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dipDataSource" />
	</bean>
	
	<!-- ========================= 下面是数据中心数据源相关配置 ======================================== -->
	<!--定义数据源 -->
	<bean id="dataSource_dc" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${dc_jdbc.driver}" />
		<property name="url" value="${dc_jdbc.url}" />
		<property name="username" value="${dc_jdbc.username}" />
		<property name="password" value="${dc_jdbc.password}" />
		<property name="initialSize" value="${dc_jdbc.initialSize}" />
		<property name="maxActive" value="${dc_jdbc.maxActive}" />
		<property name="maxIdle" value="${dc_jdbc.maxIdle}" />
		<property name="minIdle" value="${dc_jdbc.minIdle}" />
	</bean>
	<tx:annotation-driven transaction-manager="transactionManager"/>	
	<!-- 定义事物管理 -->
	<bean id="transactionManager_dc" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource_dc" />
	</bean>


	<!-- 配置mybatis的 SqlSessionFactoryBean-->
	<bean id="sqlSessionFactory_dc" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource_dc" />
		<!-- 设置mybatis的环境配置文件 -->
		<property name="configLocation" value="classpath:mybatisConfig.xml" />
	</bean>

	<!-- 指定mybatis映射器的位置，spring自动扫描并将映射器生成代理放到spring上下文中 -->
	<bean id="MapperScannerConfigurerDc" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.zebone"/>
		<property name="annotationClass" value="com.zebone.btp.core.mybatis.DcMapper"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory_dc"/>
	</bean>

    <!-- ↓====================↓WRC连接配置↓==========================↓ -->
    <!--定义数据源 数据源的ID在代码中被引用，因此不能随意修改名字-->
    <bean id="dataSource_wrc" class="org.apache.commons.dbcp.BasicDataSource"
          destroy-method="close">
        <property name="driverClassName" value="${wrc.jdbc.driver}" />
        <property name="url" value="${wrc.jdbc.url}" />
        <property name="username" value="${wrc.jdbc.username}" />
        <property name="password" value="${wrc.jdbc.password}" />
        <property name="initialSize" value="${wrc.jdbc.initialSize}" />
        <property name="maxActive" value="${wrc.jdbc.maxActive}" />
        <property name="maxIdle" value="${wrc.jdbc.maxIdle}" />
        <property name="minIdle" value="${wrc.jdbc.minIdle}" />
    </bean>

    <tx:annotation-driven transaction-manager="transactionManager_wrc"/>
    <!-- 定义事物管理 -->
    <bean id="transactionManager_wrc" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource_wrc" />
    </bean>

    <!-- 配置mybatis的 SqlSessionFactoryBean-->
    <bean id="sqlSessionFactory_wrc" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource_wrc" />
        <!-- 设置mybatis的环境配置文件 -->
        <property name="configLocation" value="classpath:mybatisConfig.xml" />
    </bean>

    <!-- 指定mybatis映射器的位置，spring自动扫描并将映射器生成代理放到spring上下文中 -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.zebone"/>
        <property name="annotationClass" value="com.zebone.btp.core.mybatis.WrcMapper"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory_wrc"/>
    </bean>

    <bean id="jdbcTemplate_wrc" class="org.springframework.jdbc.core.JdbcTemplate">
        <property name="dataSource" ref="dataSource_wrc" />
    </bean>
    <!-- ↑==================↑=============================↑================↑ -->
    
    
     <!-- ↓====================↓EMPI LOG↓==========================↓ -->
    <!--定义数据源 数据源的ID在代码中被引用，因此不能随意修改名字-->
    <bean id="dataSource_empi" class="org.apache.commons.dbcp.BasicDataSource"
		destroy-method="close">
		<property name="driverClassName" value="${empi_jdbc.driver}" />
		<property name="url" value="${empi_jdbc.url}" />
		<property name="username" value="${empi_jdbc.username}" />
		<property name="password" value="${empi_jdbc.password}" />
		<property name="initialSize" value="${empi_jdbc.initialSize}" />
		<property name="maxActive" value="${empi_jdbc.maxActive}" />
		<property name="maxIdle" value="${empi_jdbc.maxIdle}" />
		<property name="minIdle" value="${empi_jdbc.minIdle}" />
	</bean>
	<!-- 定义事物管理 -->
	<bean id="transactionManager_empi" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
		<property name="dataSource" ref="dataSource_empi" />
	</bean>


	<!-- 配置mybatis的 SqlSessionFactoryBean-->
	<bean id="sqlSessionFactory_empi" class="org.mybatis.spring.SqlSessionFactoryBean">
		<property name="dataSource" ref="dataSource_empi" />
		<!-- 设置mybatis的环境配置文件 -->
		<property name="configLocation" value="classpath:mybatisConfig.xml" />
	</bean>

	<!-- 指定mybatis映射器的位置，spring自动扫描并将映射器生成代理放到spring上下文中 -->
	<bean id="MapperScannerConfigurerEmpi" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
		<property name="basePackage" value="com.zebone"/>
		<property name="annotationClass" value="com.zebone.btp.core.mybatis.EmpiMapper"/>
		<property name="sqlSessionFactoryBeanName" value="sqlSessionFactory_empi"/>
	</bean>
    <!-- ↑==================↑=============================↑================↑ -->
    <import resource="classpath:ApplicationContext-auditlog-db.xml"/>
</beans>