package com.zebone.dip.metadata.dao;

import java.util.List;

import org.apache.ibatis.annotations.Param;
import org.apache.ibatis.session.RowBounds;

import com.zebone.btp.app.dict.pojo.DictionaryType;
import com.zebone.btp.core.mybatis.Mapper;
import com.zebone.dip.metadata.vo.DataSetConf;
import com.zebone.dip.metadata.vo.FieldConf;
@Mapper
public interface FieldConfMapper {

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table P_FIELD_CONF
     *
     * @mbggenerated Tue Jun 25 08:51:07 CST 2013
     */
    int deleteByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table P_FIELD_CONF
     *
     * @mbggenerated Tue Jun 25 08:51:07 CST 2013
     */
    int insertSelective(FieldConf record);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table P_FIELD_CONF
     *
     * @mbggenerated Tue Jun 25 08:51:07 CST 2013
     */
    FieldConf selectByPrimaryKey(String id);

    /**
     * This method was generated by MyBatis Generator.
     * This method corresponds to the database table P_FIELD_CONF
     *
     * @mbggenerated Tue Jun 25 08:51:07 CST 2013
     */
    int updateByPrimaryKey(FieldConf record);

	/**
	 * @author caixl
	 * @date Jun 25, 2013
	 * @description TODO 元数据的总数
	 * @param fieldConf 查询条件
	 * @return int
	 */
	int metadataTotalCount(FieldConf fieldConf);

	/**
	 * @author caixl
	 * @date Jun 25, 2013
	 * @description TODO 元数据信息列表
	 * @param rowBounds
	 * @param fieldConf 查询条件
	 * @return List<FieldConf>
	 */
	List<FieldConf> metadataList(RowBounds rowBounds, FieldConf fieldConf);

	/**
	 * @author caixl
	 * @date Jun 26, 2013
	 * @description TODO 查看绑定该数据元的文档个数
	 * @param id 数据源标识
	 * @return int
	 */
	int metadataExistsDocMap(String id);

	/**
	 * @author caixl
	 * @date Jun 26, 2013
	 * @description TODO 查看数据元所在数据集的个数
	 * @param id
	 * @return int
	 */
	int metadataExistsDataSet(String id);

	/**
	 * @author caixl
	 * @date Jun 26, 2013
	 * @description TODO 逻辑删除元数据信息
	 * @param list
	 * @return int
	 */
	int deleteMetadataByIds(List<String> list);

	/**
	 * @author caixl
	 * @date Jun 26, 2013
	 * @description TODO 获取数据集列表
	 * @param rowBounds
	 * @param dataSetConf
	 * @return List<DataSetConf>
	 */
	List<DataSetConf> datasetList(RowBounds rowBounds, DataSetConf dataSetConf);

	/**
	 * @author caixl
	 * @date Jun 26, 2013
	 * @description TODO 获取数据集总数
	 * @param dataSetConf
	 * @return int
	 */
	int datasetTotalCount(DataSetConf dataSetConf);

	/**
	 * @author caixl
	 * @date Jun 27, 2013
	 * @description TODO 获取数据元相关信息
	 * @param f
	 * @return List<FieldConf>
	 */
	List<FieldConf> getMetadatasByQuery(FieldConf f);

	/**
	 * @author caixl
	 * @date Jun 28, 2013
	 * @description TODO 获取数据集中的元数据列表信息
	 * @param rowBounds
	 * @param fieldConf
	 * @return List<FieldConf>
	 */
	List<FieldConf> datasetMetadataList(RowBounds rowBounds, FieldConf fieldConf);

	/**
	 * @author caixl
	 * @date Jun 28, 2013
	 * @description TODO 获取数据集中的元数据个数
	 * @param fieldConf
	 * @return int
	 */
	int datasetMetadataCount(FieldConf fieldConf);

	/**
	 * @author caixl
	 * @date Jul 2, 2013
	 * @description TODO
	 * @param rowBounds
	 * @param fieldConf
	 * @return List<FieldConf>
	 */
	List<FieldConf> metadataListBydataset(RowBounds rowBounds,
			FieldConf fieldConf);

	/**
	 * @author caixl
	 * @date Jul 2, 2013
	 * @description TODO
	 * @param fieldConf
	 * @return int
	 */
	int metadataTotalCountBydataset(FieldConf fieldConf);

	/**
	 * @author caixl
	 * @param fieldCode 
	 * @date Jul 3, 2013
	 * @description TODO 获取元数据标识
	 * @return String
	 */
	String getFieldIdByFieldCode(@Param("fieldCode")String fieldCode);
	
	
	
	/**
	 * 根据数据源编码获取数据元
	 * @param fieldConf
	 * @return
	 */
	FieldConf selectByFCode(FieldConf fieldConf);
	
	
	/**
	 * 根据数据源标识符获取数据元
	 * @param fieldId
	 * @return
	 */
	FieldConf selectByFieldId(@Param("fieldId") String fieldId);

	/**
	 * @author caixl
	 * @date Jul 12, 2013
	 * @description TODO
	 * @param fieldCode
	 * @param id
	 * @return int
	 */
	int isExistsFieldCode(@Param("fieldCode")String fieldCode,@Param("id")String id);

	/**
	 * @author caixl
	 * @date Jul 12, 2013
	 * @description TODO
	 * @param fieldId
	 * @param id
	 * @return int
	 */
	int isExistsFieldId(@Param("fieldId")String fieldId,@Param("id")String id);

	/**
	 * @author caixl
	 * @date Jul 12, 2013
	 * @description TODO
	 * @param name
	 * @return List<DictionaryType>
	 */
	List<DictionaryType> getDictInfoByName(@Param("name")String name);

	/**
	 * @author caixl
	 * @date Jul 12, 2013
	 * @description TODO
	 * @param name
	 * @return List<DictionaryType>
	 */
	List<DictionaryType> getDictInfo2ByName(@Param("name")String name);
}